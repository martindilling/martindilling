<?php

use MDH\Entities\$MODEL$;

class $NAME$ extends \BaseController {

    /**
     * $MODEL$ Repository
     *
     * @var $MODEL$
     */
    protected $$COLLECTION$;

    /**
     * Contructor
     *
     * @param $MODEL$  $$COLLECTION$
     */
    public function __construct($MODEL$ $$COLLECTION$)
    {
        $this->$$COLLECTION$ = $$COLLECTION$;
    }

    /**
     * Display a listing of $COLLECTION$
     *
     * @return Response
     */
    public function index()
    {
        $$COLLECTION$ = $this->$$COLLECTION$->all();

        return View::make('$COLLECTION$.index', compact('$COLLECTION$'));
    }

    /**
     * Show the form for creating a new $RESOURCE$
     *
     * @return Response
     */
    public function create()
    {
        return View::make('$COLLECTION$.create');
    }

    /**
     * Store a newly created $RESOURCE$ in storage.
     *
     * @return Response
     */
    public function store()
    {
        $input = Input::all();

        $validator = Validator::make($input, $MODEL$::$rules);

        if ($validator->fails())
        {
            return Redirect::back()
                ->withErrors($validator)
                ->withInput();
        }

        $this->$$COLLECTION$->create($input);

        return Redirect::route('$COLLECTION$.index');
    }

    /**
     * Display the specified $RESOURCE$.
     *
     * @param  int  $id
     * @return Response
     */
    public function show($id)
    {
        $$RESOURCE$ = $this->$$COLLECTION$->findOrFail($id);

        return View::make('$COLLECTION$.show', compact('$RESOURCE$'));
    }

    /**
     * Show the form for editing the specified $RESOURCE$.
     *
     * @param  int  $id
     * @return Response
     */
    public function edit($id)
    {
        $$RESOURCE$ = $this->$$COLLECTION$->find($id);

        return View::make('$COLLECTION$.edit', compact('$RESOURCE$'));
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  int  $id
     * @return Response
     */
    public function update($id)
    {
        $input = Input::all();

        $$RESOURCE$ = $this->$$COLLECTION$->findOrFail($id);

        $validator = Validator::make($input, $MODEL$::$rules);

        if ($validator->fails())
        {
            return Redirect::back()
                ->withErrors($validator)
                ->withInput();
        }

        $$RESOURCE$->update($input);

        return Redirect::route('$COLLECTION$.index');
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  int  $id
     * @return Response
     */
    public function destroy($id)
    {
        $this->$$COLLECTION$->destroy($id);

        return Redirect::route('$COLLECTION$.index');
    }

}
